<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
    
    
  <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 --></configSections>
  <connectionStrings>
    <!--<add name="BaiCrawler.Properties.Settings.ConnectionString" connectionString="Data Source=D:\_MY_PROJECTS\Mond\AIFS_Manager\BaiCrawler\bin\x86\Debug\BaiCrawler.DAL.MyDBContext.sdf" providerName="System.Data.SqlServerCe.4.0" />
    <add name="BaiCrawler.Properties.Settings.MyDbContextConnectionString" connectionString="Data Source=.;Initial Catalog=MyDbContext;Integrated Security=True" providerName="System.Data.SqlClient" />
    <add name="DevNoteWindowsFormsControlLibrary.Properties.Settings.MyDbContextConnectionString" connectionString="Data Source=.;Initial Catalog=MyDbContext;Integrated Security=True" providerName="System.Data.SqlClient" />-->
    <add name="MyDbContextConnectionString" connectionString="Data Source=C:\BlastAsia\Steeroid\Common\MyDBContext.sdf" providerName="System.Data.SqlServerCe.4.0" />
  </connectionStrings>
  <entityFramework>
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
      <provider invariantName="System.Data.SqlServerCe.4.0" type="System.Data.Entity.SqlServerCompact.SqlCeProviderServices, EntityFramework.SqlServerCompact" />
    </providers>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.SqlCeConnectionFactory, EntityFramework">
      <parameters>
        <parameter value="System.Data.SqlServerCe.4.0" />
      </parameters>
    </defaultConnectionFactory>
  </entityFramework>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-12.0.0.0" newVersion="12.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Essential.Diagnostics.Core" publicKeyToken="9d041bca93991466" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.2.0.0" newVersion="2.2.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.IdentityModel.Tokens.Jwt" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-5.4.0.0" newVersion="5.4.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.IdentityModel.Tokens" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-5.4.0.0" newVersion="5.4.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Azure.ServiceBus" publicKeyToken="7e34167dcc6d6d8c" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.4.0.0" newVersion="3.4.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.IdentityModel.Clients.ActiveDirectory" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.17.2.31801" newVersion="3.17.2.31801" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.IdentityModel.Clients.ActiveDirectory.Platform" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.17.2.31801" newVersion="3.17.2.31801" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
<system.data>
    <DbProviderFactories>
      <remove invariant="System.Data.SqlServerCe.4.0" />
      <add name="Microsoft SQL Server Compact Data Provider 4.0" invariant="System.Data.SqlServerCe.4.0" description=".NET Framework Data Provider for Microsoft SQL Server Compact" type="System.Data.SqlServerCe.SqlCeProviderFactory, System.Data.SqlServerCe, Version=4.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    </DbProviderFactories>
  
  </system.data><system.diagnostics>
    <sharedListeners>
      <add name="rollingfile" type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics.RollingFileTraceListener" initializeData="C:\Temp\Logs\{ApplicationName}-{DateTime:yyyy-MM-dd}.log" convertWriteToEvent="true">
        <!--
          Writes to a text file, rolling to a new file based on a filename template 
          (usually including the date).
          
          Options:
            initializeData="{ApplicationName}-{DateTime:yyyy-MM-dd}.log"
            convertWriteToEvent="true|false" 
            template="{DateTime:u} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}"
  
          Children:
            <filter 
              type="Essential.Diagnostics.ExpressionFilter, Essential.Diagnostics.Core"
              initializeData=' Id >= 8000 ' />
        -->
      </add>
    <add name="coloredconsole" type="Essential.Diagnostics.ColoredConsoleTraceListener, Essential.Diagnostics.ColoredConsoleTraceListener" template="{DateTime:HH':'mm':'ssZ} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}" convertWriteToEvent="true">
        <!--
          Writes to the console output or error stream, using color to highlight 
          event types and allowing a customised output format.
          
          Options:
            initalizeData="false to use Console.Out|true to use Console.Error"
            traceOutputOptions="template (see below) is generally better, but supported for legacy compatibility"
            activityTracingColor="Gray|other console color"
            convertWriteToEvent="false|true"
            criticalColor="Red|other console color"
            errorColor="DarkRed|other console color"
            informationColor="Gray|other console color"
            resumeColor="console color"
            startColor="console color"
            stopColor="console color"
            suspendColor="console color"
            template="format template, default: {Source} {EventType}: {Id} : {Message}"
            transferColor="console color" 
            verboseColor="DarkCyan|other console color"
            warningColor="Yellow|other console color" 
  
          Children:
            <filter 
              type="Essential.Diagnostics.ExpressionFilter, Essential.Diagnostics.Core"
              initializeData=' Id >= 8000 ' />
        -->
      </add><add name="email" type="Essential.Diagnostics.EmailTraceListener, Essential.Diagnostics.EmailTraceListener" initializeData="user1@example.org,user2@example.org">
        <!--
	        Sends each trace message received in an email, using the specified subject and 
          body templates.
          
          Note: Set a filter to avoid flooding (don't rely on trace source switch value).
          
          Options (showing default or example values):
            initalizeData="user1@example.org,user2@example.org"
            bodyTemplate="Source: {Source}
Date (UTC): {DateTime:u}
Date (Local): {LocalDateTime:yyyy'-'MM'-'dd HH':'mm':'ss zzz}
Event ID: {Id}
Level: {EventType}
Activity: {ActivityId}

Application Information:
 Computer: {MachineName}
 Application Name: {ApplicationName}
 Application Domain: {AppDomain}

Process Information:
 Process ID: {ProcessId}
 Process Name: {ProcessName}
 Process: {Process}
 User: {User}

Thread Information:
 Thread ID: [{ThreadId}]
 Thread Name: {ThreadName}
 Thread Principal: {PrincipalName}

Message:
{Message}

Data:
{Data}"
              fromAddress=""
              maxConnections="2"
              maxTracesPerHour="50"
              subjectTemplate="{EventType} {Id}: {MessagePrefix}; {MachineName}; {User}; {ProcessName}"
        -->
        <filter type="System.Diagnostics.EventTypeFilter" initializeData="Warning" />
      </add><add name="bufferedEmail" type="Essential.Diagnostics.BufferedEmailTraceListener, Essential.Diagnostics.BufferedEmailTraceListener" initializeData="user1@example.org,user2@example.org">
        <!--
          Adds formatted trace messages to a buffer and sends an email when the process 
          exits, or on request.

          Options:
            initalizeData=""
            fromAddress=""
            headerTemplate="Date (UTC): {DateTime:u}
Date (Local): {LocalDateTime:yyyy'-'MM'-'dd HH':'mm':'ss zzz}

Application Information:
 Computer: {MachineName}
 Application Name: {ApplicationName}
 Application Domain: {AppDomain}

Process Information:
 Process ID: {ProcessId}
 Process Name: {ProcessName}
 Process: {Process}
 User: {User}

Trace Events:"
            maxConnections="2"
            traceTemplate="{DateTime:u} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}"
            subjectTemplate="{Listener} {DateTime:u}; {MachineName}; {User}; {ProcessName}"
-->
        <filter type="System.Diagnostics.EventTypeFilter" initializeData="Information" />
      </add><add name="example-filelog" type="Microsoft.VisualBasic.Logging.FileLogTraceListener, Microsoft.VisualBasic, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" traceOutputOptions="DateTime,ThreadId,LogicalOperationStack" autoFlush="true" customLocation="C:\Temp\Logs" location="Custom" logFileCreationSchedule="Daily" maxFileSize="5000000" reserveDiskSpace="10000000">
        <!--
          Writes to a rolling text file. You need to specify the version of the library corresponding to the .NET Framework you have installed, and make sure the customLocation exists.
        -->
      </add><add name="inmemory" type="Essential.Diagnostics.InMemoryTraceListener, Essential.Diagnostics.InMemoryTraceListener" initializeData="100">
        <!--
          Records an immutable copy of trace events in memory, within a circular buffer of the specified size.
          
          Options:
            initalizeData="size of buffer, default: 20"
            traceOutputOptions="ignored"

          Children:
            <filter 
              type="Essential.Diagnostics.ExpressionFilter, Essential.Diagnostics.Core"
              initializeData=' Id >= 8000 ' />
  	    -->
      </add><add name="rollingxml" type="Essential.Diagnostics.RollingXmlTraceListener, Essential.Diagnostics.RollingXmlTraceListener" initializeData="C:\Temp\Logs\{ApplicationName}-{DateTime:yyyyMMdd}.svclog">
        <!--
          Writes E2ETraceEvent XML fragments to a text file, rolling to a new 
          file based on a filename template (usually including the date).
          The E2ETraceEvent XML fragment format can be read by the Service Trace Viewer tool.
          
          Options:
            initializeData="{ApplicationName}-{DateTime:yyyy-MM-dd}.svclog"
  
          Children:
            <filter 
              type="Essential.Diagnostics.ExpressionFilter, Essential.Diagnostics.Core"
              initializeData=' Id >= 8000 ' />
        -->
      </add><add name="sqldatabase" type="Essential.Diagnostics.SqlDatabaseTraceListener, Essential.Diagnostics.SqlDatabaseTraceListener" initializeData="diagnosticsdb" applicationName="Diagnostics.Sample">
        <!--
          Trace listener that writes to the database connection specified into a
          table created by the diagnostics_regsql.exe tool (in the package tools directory).

          Options:
            initializeData="connection string name"
            applicationName="application name"
            commandText="SQL command"
            maxMessageLength="1500"
  
          Children:
            <filter 
              type="Essential.Diagnostics.ExpressionFilter, Essential.Diagnostics.Core"
              initializeData=' Id >= 8000 ' />
         -->
      </add></sharedListeners>
    <sources>
      <source name="Example.RollingFile.Source" switchValue="All">
        <!--
          Add listener to source. Use named switches for multiple sources; switch values can be names, decimal, or hexadecimal.
        -->
        <listeners>
          <clear />
          <add name="rollingfile" />
        </listeners>
      </source>
    <source name="Example.ColoredConsole.Source" switchValue="All">
        <!--
          Add listener to source. Use named switches for multiple sources; switch values can be names, decimal, or hexadecimal.
        -->
        <listeners>
          <clear />
          <add name="coloredconsole" />
        </listeners>
      </source><source name="Example.Email.Source" switchValue="All">
        <!--
          Add listener to source. Use named switches for multiple sources; switch values can be names, decimal, or hexadecimal.
        -->
        <!--
          Add listener to source. Use named switches for multiple sources; switch values can be names, decimal, or hexadecimal.
        --><listeners>
          <clear />
          <add name="email" />
        <add name="bufferedEmail" /></listeners>
      </source><source name="Example.Program" switchValue="All">
        <!--
          Add listener to source. Use named switches for multiple sources; switch values can be names, decimal, or hexadecimal.
        -->
        <listeners>
          <clear />
          <add name="example-filelog" />
        </listeners>
      </source><source name="Example.InMemory.Source" switchValue="All">
        <!--
          Add listener to source. Use named switches for multiple sources; switch values can be names, decimal, or hexadecimal.
        -->
        <listeners>
          <clear />
          <add name="inmemory" />
        </listeners>
      </source><source name="Example.RollingXml.Source" switchValue="All">
        <!--
          Add listener to source. Use named switches for multiple sources; switch values can be names, decimal, or hexadecimal.
        -->
        <listeners>
          <clear />
          <add name="rollingxml" />
        </listeners>
      </source><source name="Example.SqlDatabase.Source" switchValue="All">
        <!--
          Add listener to source. Use named switches for multiple sources; switch values can be names, decimal, or hexadecimal.
        -->
        <listeners>
          <clear />
          <add name="sqldatabase" />
        </listeners>
      </source></sources>
    <trace autoflush="true" indentsize="0">
      <listeners>
        <!--
          Also add listener for legacy Trace.Write() statements (not using a TraceSource).
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        -->
        <!--
          Also add listener for legacy Trace.Write() statements (not using a TraceSource).
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        --><!--
          Also add listener for legacy Trace.Write() statements (not using a TraceSource).
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        --><!--
          Note: The buffered email trace listener needs to be configured here to use the static SendAll() method.
        
          Also add listener for legacy Trace.Write() statements (not using a TraceSource).
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        --><!--
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        --><!--
          Also add listener for legacy Trace.Write() statements (not using a TraceSource).
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        --><!--
          Also add listener for legacy Trace.Write() statements (not using a TraceSource).
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        --><!--
          Also add listener for legacy Trace.Write() statements (not using a TraceSource).
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        --><clear />
        <add name="rollingfile" />
      <add name="coloredconsole" /><add name="email" /><add name="bufferedEmail" /><add name="inmemory" /><add name="rollingxml" /><add name="sqldatabase" /></listeners>
    </trace>
  </system.diagnostics><system.net>
  
    
    
    <mailSettings>
      <smtp deliveryMethod="SpecifiedPickupDirectory" from="diagnostics@example.org">
        <!--
          Used by email trace listeners. For production, or if using a test SMTP server 
          such as smtp4dev, change to deliveryMethod="Network" and specify your mail host.
        -->
        <!--
          Used by email trace listeners. For production, or if using a test SMTP server 
          such as smtp4dev, change to deliveryMethod="Network" and specify your mail host.
        --><network host="localhost" defaultCredentials="true" />
        <specifiedPickupDirectory pickupDirectoryLocation="C:\Temp\MailPickup" />
      </smtp>
    </mailSettings>
  </system.net></configuration>