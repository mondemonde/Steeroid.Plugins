
<?xml version="1.0" encoding="utf-8" ?>
<system.diagnostics>
  <sharedListeners>
    <!--<add name="rollingfile" type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics" initializeData="##LogPath##"/>-->

    <add name="bufferedEmail" type="Essential.Diagnostics.BufferedEmailTraceListener, Essential.Diagnostics" initializeData="user1@example.org,user2@example.org">
      <!--
          Adds formatted trace messages to a buffer and sends an email when the process 
          exits, or on request.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=BufferedEmailTraceListener
        -->
      <filter type="System.Diagnostics.EventTypeFilter" initializeData="Information"/>
    </add>
    <add name="coloredconsole" type="Essential.Diagnostics.ColoredConsoleTraceListener, Essential.Diagnostics" template="{DateTime:HH':'mm':'ssZ} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}" convertWriteToEvent="true">
      <!--
          Writes to the console output or error stream, using color to highlight 
          event types and allowing a customised output format.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=ColoredConsoleTraceListener
        -->
    </add>
    <add name="email" type="Essential.Diagnostics.EmailTraceListener, Essential.Diagnostics" initializeData="user1@example.org,user2@example.org">
      <!--
	        Sends each trace message received in an email, using the specified subject and 
          body templates. Note: Set a filter to avoid flooding.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=EmailTraceListener
        -->
      <filter type="System.Diagnostics.EventTypeFilter" initializeData="Warning"/>
    </add>
    <add name="inmemory" type="Essential.Diagnostics.InMemoryTraceListener, Essential.Diagnostics" initializeData="100">
      <!--
          Records and immutable copy of trace events in memory, within a circular buffer
          of the specified size. 
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=InMemoryTraceListener
  	    -->
    </add>
    <!--<add name="rollingfile" type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics" initializeData="C:\Temp\Logs\{ApplicationName}-{DateTime:yyyy-MM-dd}.log" convertWriteToEvent="true">
       
      </add>-->
    <add name="rollingxml" type="Essential.Diagnostics.RollingXmlTraceListener, Essential.Diagnostics" initializeData="C:\Temp\Logs\{ApplicationName}-{DateTime:yyyyMMdd}.svclog">
      <!--
          Writes writes E2ETraceEvent XML fragments to a text file, rolling to a new 
          file based on a filename template (usually including the date).
          The E2ETraceEvent XML fragment format can be read by the Service Trace Viewer tool.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=RollingXmlTraceListener
        -->
    </add>
    <add name="sqldatabase" type="Essential.Diagnostics.SqlDatabaseTraceListener, Essential.Diagnostics" initializeData="diagnosticsdb" applicationName="Diagnostics.Sample">
      <!--
          Trace listener that writes to the database connection specified into a
          table created by the diagnostics_regsql.exe tool (in the package tools directory).
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=SqlDatabaseTraceListener
        -->
    </add>

    <add name="rollingfile" type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics.RollingFileTraceListener" initializeData="##LogPath##" convertWriteToEvent="true">
      <!--
          Writes to a text file, rolling to a new file based on a filename template 
          (usually including the date).
          
          Options:
            initializeData="{ApplicationName}-{DateTime:yyyy-MM-dd}.log"
            convertWriteToEvent="true|false" 
            template="{DateTime:u} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}"
  
          Children:
            <filter 
              type="Essential.Diagnostics.ExpressionFilter, Essential.Diagnostics.Core"
              initializeData=' Id >= 8000 ' />
        -->
      <!--
          Writes to a text file, rolling to a new file based on a filename template 
          (usually including the date).
          
          Options:
            initializeData="{ApplicationName}-{DateTime:yyyy-MM-dd}.log"
            convertWriteToEvent="true|false" 
            template="{DateTime:u} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}"
  
          Children:
            <filter 
              type="Essential.Diagnostics.ExpressionFilter, Essential.Diagnostics.Core"
              initializeData=' Id >= 8000 ' />
        -->
    </add>
    <add name="coloredconsole" type="Essential.Diagnostics.ColoredConsoleTraceListener, Essential.Diagnostics.ColoredConsoleTraceListener" template="{DateTime:HH':'mm':'ssZ} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}" convertWriteToEvent="true">
      <!--
          Writes to the console output or error stream, using color to highlight 
          event types and allowing a customised output format.
          
          Options:
            initalizeData="false to use Console.Out|true to use Console.Error"
            traceOutputOptions="template (see below) is generally better, but supported for legacy compatibility"
            activityTracingColor="Gray|other console color"
            convertWriteToEvent="false|true"
            criticalColor="Red|other console color"
            errorColor="DarkRed|other console color"
            informationColor="Gray|other console color"
            resumeColor="console color"
            startColor="console color"
            stopColor="console color"
            suspendColor="console color"
            template="format template, default: {Source} {EventType}: {Id} : {Message}"
            transferColor="console color" 
            verboseColor="DarkCyan|other console color"
            warningColor="Yellow|other console color" 
  
          Children:
            <filter 
              type="Essential.Diagnostics.ExpressionFilter, Essential.Diagnostics.Core"
              initializeData=' Id >= 8000 ' />
        -->
    </add>
  </sharedListeners>
  <sources>
    <source name="TraceLogger" switchValue="All">
      <listeners>
        <clear/>
        <add name="rollingfile"/>
        <add name="coloredconsole"/>
      </listeners>
    </source>
    <!--
        = Sample Source =
      <source name=""
              switchValue="All|None|Critical|Error|Warning|Information|Verbose|ActivityTracing"
              switchName="">
        <listeners>
          <clear />
          <add name="" />
          <add name="" />
        </listeners>
      </source>
      -->
    <source name="Example.RollingFile.Source" switchValue="All">
      <!--
          Add listener to source. Use named switches for multiple sources; switch values can be names, decimal, or hexadecimal.
        -->
      <!--
          Add listener to source. Use named switches for multiple sources; switch values can be names, decimal, or hexadecimal.
        -->
      <listeners>
        <clear/>
        <add name="rollingfile"/>
      </listeners>
    </source>
    <source name="Example.ColoredConsole.Source" switchValue="All">
      <!--
          Add listener to source. Use named switches for multiple sources; switch values can be names, decimal, or hexadecimal.
        -->
      <listeners>
        <clear/>
        <add name="coloredconsole"/>
      </listeners>
    </source>
  </sources>
  <!--
    -->
  <trace autoflush="true" indentsize="0">
    <listeners>
      <!--
          Legacy Trace.Write() statements (not using a TraceSource).
          Turn indent off to avoid confusion for multithreaded traces,
          and clear the default listener for performance.
        -->
      <!--
          Also add listener for legacy Trace.Write() statements (not using a TraceSource).
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        -->
      <!--
          Also add listener for legacy Trace.Write() statements (not using a TraceSource).
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        -->
      <!--
          Also add listener for legacy Trace.Write() statements (not using a TraceSource).
          For performance also clear the default listener, and turn indent off to avoid confusion for multithreaded traces.
        -->
      <clear/>
      <add name="rollingfile"/>
      <add name="coloredconsole"/>
    </listeners>
  </trace>
  <switches>
    <!--
          Specify switchName (instead of switchValue) to use the same
          switch for multiple sources.
          Values can either be SourceLevels name values, decimal,
          or hexadecimal.
        -->
    <add name="SourceSwitch1" value="None,Critical,Error,Warning,Information,Verbose,ActivityTracing,All"/>
    <add name="SourceSwitch2" value="0,1,3,7,15,31,0xFF00,0xFFFF"/>
  </switches>

</system.diagnostics>

